// Generated by CoffeeScript 1.10.0
var lodheatmap;

lodheatmap = function() {
  var axispos, cellSelect, celltip, chart, chrGap, colors, height, lod_labels, margin, nullcolor, nyticks, quantScale, rectcolor, rotate_ylab, svg, title, titlepos, width, xlab, xscale, ylab, yscale, yticks, zlim, zscale, zthresh;
  width = 1200;
  height = 600;
  margin = {
    left: 60,
    top: 40,
    right: 40,
    bottom: 40
  };
  axispos = {
    xtitle: 25,
    ytitle: 30,
    xlabel: 5,
    ylabel: 5
  };
  chrGap = 8;
  titlepos = 20;
  rectcolor = "#e6e6e6";
  nullcolor = "#e6e6e6";
  colors = ["slateblue", "white", "crimson"];
  title = "";
  xlab = "Chromosome";
  ylab = "";
  rotate_ylab = null;
  zlim = null;
  zthresh = null;
  quantScale = null;
  lod_labels = null;
  nyticks = 5;
  yticks = null;
  xscale = d3.scale.linear();
  yscale = d3.scale.linear();
  zscale = d3.scale.linear();
  cellSelect = null;
  svg = null;
  celltip = null;
  chart = function(selection) {
    return selection.each(function(data) {
      var cells, chr, extent, g, gEnter, i, j, k, l, len, len1, len2, len3, len4, lod, lodcol, m, n, nlod, o, pos, quant_y_scale, rectHeight, ref, ref1, ref2, ref3, ref4, titlegrp, xLR, xaxis, yaxis, zmax, zmin;
      data = reorgLodData(data);
      data = chrscales(data, width, chrGap, margin.left, true);
      xscale = data.xscale;
      nlod = data.lodnames.length;
      yscale.domain([-0.5, nlod - 0.5]).range([margin.top + height, margin.top]);
      rectHeight = yscale(0) - yscale(1);
      xLR = {};
      ref = data.chrnames;
      for (k = 0, len = ref.length; k < len; k++) {
        chr = ref[k];
        xLR[chr] = getLeftRight(data.posByChr[chr]);
      }
      zmin = 0;
      zmax = 0;
      ref1 = data.lodnames;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        lodcol = ref1[l];
        extent = d3.extent(data[lodcol]);
        if (extent[0] < zmin) {
          zmin = extent[0];
        }
        if (extent[1] > zmax) {
          zmax = extent[1];
        }
      }
      if (-zmin > zmax) {
        zmax = -zmin;
      }
      zlim = zlim != null ? zlim : [-zmax, 0, zmax];
      if (zlim.length !== colors.length) {
        displayError("zlim.length (" + zlim.length + ") != colors.length (" + colors.length + ")");
      }
      zscale.domain(zlim).range(colors);
      zthresh = zthresh != null ? zthresh : zmin - 1;
      data.cells = [];
      ref2 = data.chrnames;
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        chr = ref2[m];
        ref3 = data.posByChr[chr];
        for (i = n = 0, len3 = ref3.length; n < len3; i = ++n) {
          pos = ref3[i];
          ref4 = data.lodByChr[chr][i];
          for (j = o = 0, len4 = ref4.length; o < len4; j = ++o) {
            lod = ref4[j];
            if (lod >= zthresh || lod <= -zthresh) {
              data.cells.push({
                z: lod,
                left: (xscale[chr](pos) + xscale[chr](xLR[chr][pos].left)) / 2,
                right: (xscale[chr](pos) + xscale[chr](xLR[chr][pos].right)) / 2,
                lodindex: j,
                chr: chr,
                pos: pos
              });
            }
          }
        }
      }
      lod_labels = lod_labels != null ? lod_labels : data.lodnames;
      svg = d3.select(this).selectAll("svg").data([data]);
      gEnter = svg.enter().append("svg").attr("class", "d3panels").append("g");
      svg.attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom);
      g = svg.select("g");
      g.append("g").attr("id", "boxes").selectAll("empty").data(data.chrnames).enter().append("rect").attr("id", function(d) {
        return "box" + d;
      }).attr("x", function(d, i) {
        return data.chrStart[i];
      }).attr("y", function(d) {
        return margin.top;
      }).attr("height", height).attr("width", function(d, i) {
        return data.chrEnd[i] - data.chrStart[i];
      }).attr("fill", rectcolor).attr("stroke", "none");
      titlegrp = g.append("g").attr("class", "title").append("text").attr("x", margin.left + width / 2).attr("y", margin.top - titlepos).text(title);
      xaxis = g.append("g").attr("class", "x axis");
      xaxis.selectAll("empty").data(data.chrnames).enter().append("text").attr("x", function(d, i) {
        return (data.chrStart[i] + data.chrEnd[i]) / 2;
      }).attr("y", margin.top + height + axispos.xlabel).text(function(d) {
        return d;
      });
      xaxis.append("text").attr("class", "title").attr("x", margin.left + width / 2).attr("y", margin.top + height + axispos.xtitle).text(xlab);
      rotate_ylab = rotate_ylab != null ? rotate_ylab : ylab.length > 1;
      yaxis = g.append("g").attr("class", "y axis");
      yaxis.append("text").attr("class", "title").attr("y", margin.top + height / 2).attr("x", margin.left - axispos.ytitle).text(ylab).attr("transform", rotate_ylab ? "rotate(270," + (margin.left - axispos.ytitle) + "," + (margin.top + height / 2) + ")" : "");
      if (quantScale != null) {
        quant_y_scale = d3.scale.linear().domain([quantScale[0], quantScale[quantScale.length - 1]]).range([margin.top + height - rectHeight / 2, margin.top + rectHeight / 2]);
        yticks = yticks != null ? yticks : quant_y_scale.ticks(nyticks);
        yaxis.selectAll("empty").data(yticks).enter().append("text").attr("y", function(d) {
          return quant_y_scale(d);
        }).attr("x", margin.left - axispos.ylabel).text(function(d) {
          return formatAxis(yticks)(d);
        });
      } else {
        yaxis.selectAll("empty").data(lod_labels).enter().append("text").attr("id", function(d, i) {
          return "yaxis" + i;
        }).attr("y", function(d, i) {
          return yscale(i);
        }).attr("x", margin.left - axispos.ylabel).text(function(d) {
          return d;
        }).attr("opacity", 0);
      }
      celltip = d3.tip().attr('class', 'd3-tip').html(function(d) {
        var p, z;
        z = d3.format(".2f")(Math.abs(d.z));
        p = d3.format(".1f")(d.pos);
        return d.chr + "@" + p + ", " + lod_labels[d.lodindex] + " &rarr; " + z;
      }).direction('e').offset([0, 10]);
      svg.call(celltip);
      cells = g.append("g").attr("id", "cells");
      cellSelect = cells.selectAll("empty").data(data.cells).enter().append("rect").attr("x", function(d) {
        return d.left;
      }).attr("y", function(d) {
        return yscale(d.lodindex) - rectHeight / 2;
      }).attr("width", function(d) {
        return d.right - d.left;
      }).attr("height", rectHeight).attr("class", function(d, i) {
        return "cell" + i;
      }).attr("fill", function(d) {
        if (d.z != null) {
          return zscale(d.z);
        } else {
          return nullcolor;
        }
      }).attr("stroke", "none").attr("stroke-width", "1").on("mouseover.paneltip", function(d) {
        yaxis.select("text#yaxis" + d.lodindex).attr("opacity", 1);
        d3.select(this).attr("stroke", "black");
        return celltip.show(d);
      }).on("mouseout.paneltip", function(d) {
        yaxis.select("text#yaxis" + d.lodindex).attr("opacity", 0);
        d3.select(this).attr("stroke", "none");
        return celltip.hide();
      });
      return g.append("g").attr("id", "boxes").selectAll("empty").data(data.chrnames).enter().append("rect").attr("id", function(d) {
        return "box" + d;
      }).attr("x", function(d, i) {
        return data.chrStart[i];
      }).attr("y", function(d) {
        return margin.top;
      }).attr("height", height).attr("width", function(d, i) {
        return data.chrEnd[i] - data.chrStart[i];
      }).attr("fill", "none").attr("stroke", "black").attr("stroke-width", "none");
    });
  };
  chart.width = function(value) {
    if (!arguments.length) {
      return width;
    }
    width = value;
    return chart;
  };
  chart.height = function(value) {
    if (!arguments.length) {
      return height;
    }
    height = value;
    return chart;
  };
  chart.margin = function(value) {
    if (!arguments.length) {
      return margin;
    }
    margin = value;
    return chart;
  };
  chart.axispos = function(value) {
    if (!arguments.length) {
      return axispos;
    }
    axispos = value;
    return chart;
  };
  chart.titlepos = function(value) {
    if (!arguments.length) {
      return titlepos;
    }
    titlepos = value;
    return chart;
  };
  chart.rectcolor = function(value) {
    if (!arguments.length) {
      return rectcolor;
    }
    rectcolor = value;
    return chart;
  };
  chart.nullcolor = function(value) {
    if (!arguments.length) {
      return nullcolor;
    }
    nullcolor = value;
    return chart;
  };
  chart.colors = function(value) {
    if (!arguments.length) {
      return colors;
    }
    colors = value;
    return chart;
  };
  chart.title = function(value) {
    if (!arguments.length) {
      return title;
    }
    title = value;
    return chart;
  };
  chart.xlab = function(value) {
    if (!arguments.length) {
      return xlab;
    }
    xlab = value;
    return chart;
  };
  chart.ylab = function(value) {
    if (!arguments.length) {
      return ylab;
    }
    ylab = value;
    return chart;
  };
  chart.rotate_ylab = function(value) {
    if (!arguments.length) {
      return rotate_ylab;
    }
    rotate_ylab = value;
    return chart;
  };
  chart.zthresh = function(value) {
    if (!arguments.length) {
      return zthresh;
    }
    zthresh = value;
    return chart;
  };
  chart.zlim = function(value) {
    if (!arguments.length) {
      return zlim;
    }
    zlim = value;
    return chart;
  };
  chart.chrGap = function(value) {
    if (!arguments.length) {
      return chrGap;
    }
    chrGap = value;
    return chart;
  };
  chart.nyticks = function(value) {
    if (!arguments.length) {
      return nyticks;
    }
    nyticks = value;
    return chart;
  };
  chart.yticks = function(value) {
    if (!arguments.length) {
      return yticks;
    }
    yticks = value;
    return chart;
  };
  chart.quantScale = function(value) {
    if (!arguments.length) {
      return quantScale;
    }
    quantScale = value;
    return chart;
  };
  chart.lod_labels = function(value) {
    if (!arguments.length) {
      return lod_labels;
    }
    lod_labels = value;
    return chart;
  };
  chart.xscale = function() {
    return xscale;
  };
  chart.yscale = function() {
    return yscale;
  };
  chart.zscale = function() {
    return zscale;
  };
  chart.cellSelect = function() {
    return cellSelect;
  };
  chart.remove = function() {
    svg.remove();
    celltip.destroy();
    return null;
  };
  return chart;
};
